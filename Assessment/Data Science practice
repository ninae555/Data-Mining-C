#%%

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


#%%
#importing data as a dataframe
iris_df = pd.read_csv('Iris_Data (2).csv')
iris_df
# %%
#simple EDA

# printing shape of the data frame and finding the data types
print(iris_df.shape)
print(iris_df.dtypes)

#checking for null values
null_counts = iris_df.isnull().sum()
print(null_counts)

#Printing the column heads and first 5 rows
print(iris_df.head())

#column names

print(iris_df.columns)
# %%
# Finding how many irises belong to each species


species_count = iris_df.groupby('Labels').size()

print(species_count)


# %%
# Making a scatterplot of petal length vs sepal length

# Creating a scatter plot with different colors for each label


fig, ax = plt.subplots()

colors = {0:'tab:blue', 1:'tab:purple', 2:'tab:green'}

ax.scatter(iris_df[' Petal Length'], iris_df['Sepal Length'], c=iris_df['Labels'].map(colors))


# # Set the axis labels and title
ax.set_xlabel(' Petal Length')
ax.set_ylabel('Sepal Length')
ax.set_title('Scatter Plot of Petal Length vs. Sepal Length')

# # Display the plot
plt.show()
# %%
#Fitting a regression model predicting 
#sepal lenght based on petal lenght
#petal width and sepal width 

import sklearn
from sklearn import metrics



from sklearn.linear_model import LinearRegression

from sklearn.metrics import r2_score

# %%
#Implementing an Edit-Distance Algorithm 

def hammingDistance(string1, string2):
    if len(string1) != len(string2):
        return "Error: imput must be equal lengths"
    distance = 0
    for i in range(min(len(string1), len(string2))):
        if string1[i] != string2[i]:
            # check for capitalization switch
            if i != 0 and string1[i].upper() == string2[i].upper():
                distance += 0.5
            else:
                distance += 1
        # check for S/Z equivalence
        elif string1[i].upper() == 'S' and string2[i].upper() == 'Z':
            continue
        elif string1[i].upper() == 'Z' and string2[i].upper() == 'S':
            continue
    # add remaining characters in longer string to distance
    distance += abs(len(string1) - len(string2))
    return distance

#Use the program you wrote to score the following strings:
# "data Science" to "Data Sciency"
# "organizing" to "orGanising"
# "AGPRklafsdyweIllIIgEnXuTggzF" to "AgpRkliFZdiweIllIIgENXUTygSF")

print(hammingDistance("data Science", "Data Sciency"))
print(hammingDistance("organizing","orGanising"))
print(hammingDistance("AGPRklafsdyweIllIIgEnXuTggzF", "AgpRkliFZdiweIllIIgENXUTygSF"))

# A scenario would be applicable for when anyone is inputting data. They could be typing quickly and mispell or press the wrong key. It determines the number of bits that are different in binary sequences. 

#%%

patent_df = pd.read_csv('patent_drawing data (3).csv')
print(patent_df.head())


# count how many of the rows have the words "view" or "perspective" but do not include "bottom", "top", "front" or "rear" in  the text field



# What is the average number of drawing descriptions per patent? 
# %%
